// Copyright (c) 2020 by Audere
//
// Use of this source code is governed by an LGPL-3.0 license that
// can be found in the LICENSE file distributed with this file.
import React, { useCallback } from "react";
import { useHistory } from "react-router-dom";
import Login from "../Login/Login";
import { AppContext, withApp } from "components/App/context";
import { useCookies } from "react-cookie";
import { AuthenticateRequest } from "abt-lib/requests/Authenticate";

export const Home = ({ app }: { app: AppContext }) => {

  // For now we are just storing an id generated by the backend as our login identification.
  // We will eventually decode a user_id from the login response jwt and retrieve the test record based on that.
  const [ , setCookie ] = useCookies(["login-token"]);
  const { dispatch } = app;
  const history = useHistory();
  const login = app.container.getLogin();
  
  const handleLogin = useCallback(async (request: AuthenticateRequest) => {
    const response = await login(request);

    if (response.success) {
      dispatch({
        type: "LOGIN_SUCCESS",
        token: response.token as string
      });

      // For now, just generate a uuid on login if one isn't set
      setCookie('login-token', response.token, { path: '/' });
      
      history.push("/test");
    } else {
      dispatch({
        type: "LOGOUT"
      });
    }
  }, [dispatch, history, login, setCookie]);

  return (
    <Login
      formSubmit={handleLogin}
    />
  );
};

export default withApp(Home);
